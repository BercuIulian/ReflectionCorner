@page "/manage-review-types"
@using ReflectionCorner.Models
@using ReflectionCorner.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="page-title">Manage Review Types</h3>
<div class="header-bar">    
    <button class="btn add-btn" @onclick="ShowAddForm">Add New Review Type</button>
</div>


@if (showAddForm)
{
    <div class="card-form">
        <h4 class="form-title">Add New Review Type</h4>
        <EditForm Model="@newReviewType" OnValidSubmit="AddReviewType">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Name:</label>
                <InputText id="name" @bind-Value="newReviewType.Name" class="form-input" />
            </div>

            <div class="form-group">
                <label for="desc">Description:</label>
                <InputText id="desc" @bind-Value="newReviewType.Description" class="form-input" rows="3" />
            </div>

            <div class="form-actions">
                <button type="submit" class="btn save-btn">Save</button>
                <button type="button" class="btn cancel-btn" @onclick="CancelAdd">Cancel</button>
            </div>
        </EditForm>
    </div>
}


<div class="review-grid">
    @foreach (var reviewType in customReviewTypes)
    {
        <div class="review-card">
            <h4 class="review-title">@reviewType.Name</h4>
            <p class="truncate">@reviewType.Description</p>
            <p><strong>Created:</strong> @reviewType.CreatedAt.ToShortDateString()</p>

            <div class="review-actions">
                <button class="btn delete-btn" @onclick="() => DeleteReviewType(reviewType.Id)">Delete</button>
            </div>
        </div>
    }
</div>


@code {
    private List<CustomReviewType> customReviewTypes = new List<CustomReviewType>();
    private CustomReviewType newReviewType = new CustomReviewType();
    private bool showAddForm = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomReviewTypes();
    }

    private async Task LoadCustomReviewTypes()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            int userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);
            customReviewTypes = await Context.CustomReviewTypes
                .Where(rt => rt.UserId == userId)
                .OrderBy(rt => rt.Name)
                .ToListAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void ShowAddForm()
    {
        newReviewType = new CustomReviewType();
        showAddForm = true;
    }

    private void CancelAdd()
    {
        showAddForm = false;
        newReviewType = new CustomReviewType();
    }

    private async Task AddReviewType()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            int userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);

            newReviewType.UserId = userId;
            newReviewType.IsDefault = false;

            Context.CustomReviewTypes.Add(newReviewType);
            await Context.SaveChangesAsync();

            await LoadCustomReviewTypes();
            await JSRuntime.InvokeVoidAsync("alert", "Review type added successfully!");

            showAddForm = false;
            newReviewType = new CustomReviewType();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding review type: {ex.Message}");
        }
    }

    private async Task DeleteReviewType(int reviewTypeId)
    {
        try
        {
            var reviewType = await Context.CustomReviewTypes.FindAsync(reviewTypeId);
            if (reviewType != null)
            {
                Context.CustomReviewTypes.Remove(reviewType);
                await Context.SaveChangesAsync();
                await LoadCustomReviewTypes();
                await JSRuntime.InvokeVoidAsync("alert", "Review type deleted successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting review type: {ex.Message}");
        }
    }
}