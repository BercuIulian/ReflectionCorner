@page "/my-reviews"
@using ReflectionCorner.Models
@using ReflectionCorner.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="text-2xl font-bold mb-4">My Reviews</h3>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    @foreach (var review in reviews)
    {
        <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <h2 class="card-title">@review.Title</h2>
                <p>Type: @GetReviewTypeDisplay(review)</p>
                @if (review.Type != ReviewType.TVShow)
                {
                    <p>Rating: @review.Rating/5</p>
                    <p class="truncate">@review.Content</p>
                }
                <p>Created: @review.CreatedAt.ToShortDateString()</p>
                <p>Visibility: @(review.IsPublic ? "Public" : "Private")</p>
                <div class="card-actions justify-end mt-4">
                    <button class="btn btn-primary" @onclick="() => EditReview(review.Id)">Edit</button>
                    <button class="btn btn-error" @onclick="() => ConfirmDelete(review.Id)">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

@if (showDeleteConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 class="text-lg font-bold mb-4">Confirm Deletion</h3>
            <p>Are you sure you want to delete this review?</p>
            <div class="mt-4 flex justify-end space-x-2">
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                <button class="btn btn-error" @onclick="DeleteReview">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Review> reviews = new List<Review>();
    private bool showDeleteConfirmation = false;
    private int reviewToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            int userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);
            reviews = await Context.Reviews
                .Include(r => r.CustomReviewType)
                .Where(r => r.UserId == userId)
                .OrderByDescending(r => r.CreatedAt)
                .ToListAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private string GetReviewTypeDisplay(Review review)
    {
        if (review.Type == ReviewType.Custom && review.CustomReviewType != null)
        {
            return review.CustomReviewType.Name;
        }
        return review.Type.ToString();
    }

    private void EditReview(int reviewId)
    {
        NavigationManager.NavigateTo($"/edit-review/{reviewId}");
    }

    private void ConfirmDelete(int reviewId)
    {
        reviewToDeleteId = reviewId;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        StateHasChanged();
    }

    private async Task DeleteReview()
    {
        try
        {
            var reviewToDelete = await Context.Reviews.FindAsync(reviewToDeleteId);
            if (reviewToDelete != null)
            {
                Context.Reviews.Remove(reviewToDelete);
                await Context.SaveChangesAsync();
                await LoadReviews();
                await JSRuntime.InvokeVoidAsync("alert", "Review deleted successfully.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Review not found. It may have been already deleted.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred while deleting the review: {ex.Message}");
        }
        finally
        {
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }
}