@page "/edit-profile"
@using System.Security.Claims
@using ReflectionCorner.Data
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager

<h2>Edit Profile</h2>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" @bind-Value="user.FirstName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="user.LastName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="contact">Contact</label>
        <InputText id="contact" @bind-Value="user.Contact" class="form-control" />
    </div>

    <div class="form-group">
        <label>
            <InputCheckbox @bind-Value="user.IsPublic" />
            Make profile public
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <button type="button" class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>
</EditForm>

@code {
    private User user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = int.Parse(authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        user = await Context.Users.FindAsync(userId);
    }

    private async Task HandleValidSubmit()
    {
        Context.Update(user);
        await Context.SaveChangesAsync();
        NavigationManager.NavigateTo("/profile");
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/profile");
    }
}