@page "/profile"
@using ReflectionCorner.Areas.Identity
@using System.Security.Claims
@using ReflectionCorner.Data
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager


<div class="home-page">
    <div class="profile-container">
        <h2 class="profile-title">Your Profile</h2>

        <div class="profile-card">
            <h5 class="mb-3">@($"{currentUser?.FirstName ?? ""} {currentUser?.LastName ?? ""}")</h5>
            <p class="profile-field"><span class="profile-label">Usernames:</span> @username</p>
            <p class="profile-field"><span class="profile-label">Email:</span> @email</p>
            <p class="profile-field"><span class="profile-label">Contact:</span> @(currentUser?.Contact ?? "Not provided")</p>
            <p class="profile-field"><span class="profile-label">Profile Status:</span> @(currentUser?.IsPublic == true ? "Public" : "Private")</p>

            <div class="profile-actions">
                <button class="btn btn-primary" @onclick="NavigateToEditProfile">Edit Profile</button>
                <button class="btn btn-danger-red" @onclick="ShowDeleteConfirmation">Delete Profile</button>
            </div>
        </div>

        @if (showDeleteConfirmation)
        {
            <div class="mt-4">
                <DeleteConfirmationDialog OnConfirm="DeleteProfile"
                                          OnCancel="CancelDelete"
                                          OnPasswordVerify="VerifyPassword"
                                          ErrorMessage="@errorMessage" />
            </div>
        }
    </div>
</div>



@code {
    private string username = "";
    private string email = "";
    private bool showDeleteConfirmation = false;
    private string errorMessage = "";
    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            username = user.Identity.Name;
            var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
            currentUser = await Context.Users.FindAsync(userId);
            email = currentUser?.Email ?? "";
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToEditProfile() => NavigationManager.NavigateTo("/edit-profile");

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
        errorMessage = "";
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        errorMessage = "";
    }

    private async Task<bool> VerifyPassword(string password) =>
        currentUser?.Password == password;

    private async Task DeleteProfile()
    {
        if (currentUser is null) return;

        Context.Users.Remove(currentUser);
        await Context.SaveChangesAsync();

        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/");
    }
}
