@page "/signup"
@using ReflectionCorner.Models
@using ReflectionCorner.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<div class="signup-page">
    <header class="header">
        <MudLink Href="/" Underline="Underline.None">
            <MudText Typo="Typo.h5" Class="brand">ReflectionCorner</MudText>
        </MudLink>
    </header>

    <main class="main-section">
        <div class="signup-card">
            <MudText Typo="Typo.h4" Align="Align.Center" Class="signup-title">Create Your Account</MudText>

            <EditForm Model="@signUpModel" OnValidSubmit="HandleValidSubmit" Class="signup-form">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <MudTextField @bind-Value="signUpModel.Username"
                                  Label="Username"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  For="@(() => signUpModel.Username)"
                                  Class="form-input" />
                </div>

                <div class="form-group">
                    <MudTextField @bind-Value="signUpModel.Email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  InputType="InputType.Email"
                                  For="@(() => signUpModel.Email)"
                                  Class="form-input" />
                </div>

                <div class="form-group">
                    <MudTextField @bind-Value="signUpModel.Password"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  For="@(() => signUpModel.Password)"
                                  Class="form-input" />
                </div>

                <div class="form-group">
                    <MudTextField @bind-Value="signUpModel.ConfirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  FullWidth="true"
                                  InputType="InputType.Password"
                                  For="@(() => signUpModel.ConfirmPassword)"
                                  Class="form-input" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="error-alert">@errorMessage</MudAlert>
                }

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Size="Size.Large"
                           Class="submit-btn">
                    Sign Up
                </MudButton>
            </EditForm>

            <div class="signup-footer">
                <MudText Align="Align.Center">
                    Already have an account?
                    <MudLink Href="/login" Underline="Underline.Always" Color="Color.Primary">Log in</MudLink>
                </MudText>
            </div>
        </div>
    </main>

    <footer class="footer">
        <MudLink Href="/privacy" Underline="Underline.None" Class="footer-link">Privacy Policy</MudLink>
        <MudLink Href="/terms" Underline="Underline.None" Class="footer-link">Terms of Service</MudLink>
    </footer>
</div>

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    * {
        font-family: 'Poppins', sans-serif;
    }

    .signup-page {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background: linear-gradient(to bottom, #f0f4f8, #d9e2ec);
        font-family: 'Poppins', sans-serif;
    }

    .header {
        display: flex;
        justify-content: center;
        padding: 1rem;
    }

    .brand {
        font-weight: 600;
        font-size: 1.5rem;
        color: #333;
    }

    .main-section {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }

    .signup-card {
        background: #ffffff;
        padding: 2rem 2rem;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .signup-title {
        margin-bottom: 1rem;
        font-weight: 600;
        color: #333;
    }

    .signup-form {
        display: flex;
        flex-direction: column;
        gap: 0.8rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-input {
        margin-bottom: 0.rem;
    }

    .error-alert {
        margin-bottom: 1rem;
    }

    .submit-btn {
        margin-top: 0rem;
        height: 50px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1rem;
    }

    .signup-footer {
        margin-top: 1rem;
        text-align: center;
        font-size: 0.9rem;
    }

    .footer {
        display: flex;
        justify-content: center;
        gap: 1rem;
        padding: 1rem 0;
        background-color: transparent;
        font-size: 0.8rem;
    }

    .footer-link {
        color: #555;
    }
</style>

@code {
    private SignUpModel signUpModel = new SignUpModel();
    private string? errorMessage;

    private class SignUpModel
    {
        [Required]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        [StringLength(100)]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var existingUsername = await Context.Users.FirstOrDefaultAsync(u => u.Username == signUpModel.Username);
            if (existingUsername != null)
            {
                errorMessage = "This username is already taken. Please choose a different one.";
                return;
            }

            var existingEmail = await Context.Users.FirstOrDefaultAsync(u => u.Email == signUpModel.Email);
            if (existingEmail != null)
            {
                errorMessage = "This email is already registered. Please use a different email or try logging in.";
                return;
            }

            var newUser = new User
            {
                Username = signUpModel.Username,
                Email = signUpModel.Email,
                Password = signUpModel.Password
            };

            Context.Users.Add(newUser);
            await Context.SaveChangesAsync();

            Snackbar.Add("Account created successfully!", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while signing up. Please try again.";
            Console.WriteLine(ex.Message);
        }
    }
}
