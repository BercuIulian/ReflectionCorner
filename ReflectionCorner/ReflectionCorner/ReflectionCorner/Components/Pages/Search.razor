@page "/search"
@using ReflectionCorner.Models
@using ReflectionCorner.Services
@using System.Security.Claims
@inject SearchService SearchService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <h3 class="page-title">Search Reviews</h3>


    <div class="card shadow-sm">
        <div class="card-body p-4">
            <h4 class="card-title mb-3">Search Criteria</h4>

            <EditForm Model="@searchCriteria" OnValidSubmit="HandleSearch">
                <DataAnnotationsValidator />

                <div class="row mb-4">
                    <div class="col-md-4 mb-3">
                        <label for="reviewTitle" class="form-label"><strong>Review Title</strong></label>
                        <InputText id="reviewTitle" @bind-Value="searchCriteria.ReviewTitle"
                                   class="form-control form-input" placeholder="Enter review title..." />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="reviewType" class="form-label"><strong>Review Type</strong></label>
                        <InputText id="reviewType" @bind-Value="searchCriteria.ReviewType"
                                   class="form-control form-input" placeholder="e.g., Movie, TVShow..." />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="username" class="form-label"><strong>Username</strong></label>
                        <InputText id="username" @bind-Value="searchCriteria.Username"
                                   class="form-control form-input" placeholder="Enter username..." />
                    </div>
                </div>

                <div class="d-flex gap-2 justify-content-end">
                    <button type="submit" class="btn btn-primary" disabled="@isSearching">
                        @if (isSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Searching...</span>
                        }
                        else
                        {
                            <span>Search</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
                </div>
            </EditForm>
        </div>
    </div>

    @if (hasSearched)
    {
        <div class="mt-4">
            <h5>Search Results (@searchResults.Count found)</h5>
        </div>

        @if (searchResults.Any())
        {
            <div class="row g-3 mt-2">
                @foreach (var result in searchResults)
                {
                    <div class="col-md-4">
                        <div class="card h-100 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@result.Title</h5>
                                <p class="mb-1"><strong>By:</strong> @result.Username</p>
                                <p class="mb-1"><strong>Type:</strong> @result.ReviewTypeName</p>
                                @if (result.ReviewType != ReviewType.TVShow)
                                {
                                    <p class="mb-1"><strong>Rating:</strong> @result.Rating/5</p>
                                    <p class="text-muted small mb-2">@result.Content</p>
                                }
                                <p class="text-muted small"><strong>Created:</strong> @result.CreatedAt.ToShortDateString()</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info mt-3">
                <strong>No Results Found:</strong> No reviews match your search criteria. Try adjusting your search terms.
            </div>
        }
    }
</div>



@code {
    private SearchCriteria searchCriteria = new SearchCriteria();
    private List<SearchResult> searchResults = new List<SearchResult>();
    private bool hasSearched = false;
    private bool isSearching = false;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        currentUserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);
    }

    private async Task HandleSearch()
    {
        if (!searchCriteria.HasCriteria)
        {
            return;
        }

        isSearching = true;
        StateHasChanged();

        try
        {
            searchResults = await SearchService.SearchReviewsAsync(searchCriteria, currentUserId);
            hasSearched = true;
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or alert
            Console.WriteLine($"Search error: {ex.Message}");
            searchResults = new List<SearchResult>();
            hasSearched = true;
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private void ClearSearch()
    {
        searchCriteria = new SearchCriteria();
        searchResults = new List<SearchResult>();
        hasSearched = false;
        StateHasChanged();
    }
}