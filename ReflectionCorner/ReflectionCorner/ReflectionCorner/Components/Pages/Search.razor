@page "/search"
@using ReflectionCorner.Models
@using ReflectionCorner.Services
@using System.Security.Claims
@inject SearchService SearchService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-bold mb-4">Search Reviews</h3>

<div class="card bg-base-100 shadow-xl mb-6">
    <div class="card-body">
        <h4 class="card-title mb-4">Search Criteria</h4>

        <EditForm Model="@searchCriteria" OnValidSubmit="HandleSearch">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div class="form-group">
                    <label for="reviewTitle" class="form-label">Review Title</label>
                    <InputText id="reviewTitle" @bind-Value="searchCriteria.ReviewTitle"
                               class="form-control" placeholder="Enter review title..." />
                </div>

                <div class="form-group">
                    <label for="reviewType" class="form-label">Review Type</label>
                    <InputText id="reviewType" @bind-Value="searchCriteria.ReviewType"
                               class="form-control" placeholder="e.g., Movie, TVShow, Episode..." />
                </div>

                <div class="form-group">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="searchCriteria.Username"
                               class="form-control" placeholder="Enter username..." />
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isSearching">
                    @if (isSearching)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Searching...</span>
                    }
                    else
                    {
                        <span>Search</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
            </div>
        </EditForm>
    </div>
</div>

@if (hasSearched)
{
    <div class="mb-4">
        <h4>Search Results (@searchResults.Count found)</h4>
    </div>

    @if (searchResults.Any())
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            @foreach (var result in searchResults)
            {
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <h2 class="card-title">@result.Title</h2>
                        <p><strong>By:</strong> @result.Username</p>
                        <p><strong>Type:</strong> @result.ReviewTypeName</p>
                        @if (result.ReviewType != ReviewType.TVShow)
                        {
                            <p><strong>Rating:</strong> @result.Rating/5</p>
                            <p class="truncate">@result.Content</p>
                        }
                        <p><strong>Created:</strong> @result.CreatedAt.ToShortDateString()</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h4>No Results Found</h4>
            <p>No reviews match your search criteria. Try adjusting your search terms.</p>
        </div>
    }
}

@code {
    private SearchCriteria searchCriteria = new SearchCriteria();
    private List<SearchResult> searchResults = new List<SearchResult>();
    private bool hasSearched = false;
    private bool isSearching = false;
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        currentUserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);
    }

    private async Task HandleSearch()
    {
        if (!searchCriteria.HasCriteria)
        {
            return;
        }

        isSearching = true;
        StateHasChanged();

        try
        {
            searchResults = await SearchService.SearchReviewsAsync(searchCriteria, currentUserId);
            hasSearched = true;
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or alert
            Console.WriteLine($"Search error: {ex.Message}");
            searchResults = new List<SearchResult>();
            hasSearched = true;
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private void ClearSearch()
    {
        searchCriteria = new SearchCriteria();
        searchResults = new List<SearchResult>();
        hasSearched = false;
        StateHasChanged();
    }
}